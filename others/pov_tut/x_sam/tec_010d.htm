<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
<title>POV-Ray Beispiele, Erstellung von Objekten f&uuml;r POV-Ray</title>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<meta http-equiv="language" content="de">
<meta name="robots" content="index">
<meta name="robots" content="follow">
<meta name="Author" content="Friedrich A. Lohmueller">
<meta name="copyright" content="Copyright 2009, Friedrich A. Lohmueller - all rights reserved worldwide">
<meta name="description" content="POV-Ray Beispiele, Erstellung von Objekten f&uuml;r POV-Ray">
<meta name="keywords" content="POV, POVRAY, POV-Ray, Raytracing, 3D-Grafik, 3D Graphik, Computergraphik, POV-Ray Objects, Fertige Objekte f&uuml;r POV-Ray">
<link rel="stylesheet" type="text/css" href="../lo1style.css">
<SCRIPT LANGUAGE=JavaScript>
<!--
function ShowImage(ImageHtml) {
 New=window.open(ImageHtml, "PictureWin", "status=0,scrollbars=0,resizable=1,width=655,height=465");
 New.focus();  }
//-->
</SCRIPT>
</head>

<body bgcolor="#d8d8d0" text="#505030" link="#006677" vlink="#445566" alink="#cc0055">

<table width="100%" border="0"><tr>
 <td valign="top"><h6><nobr>Beschreibungen und Beispiele zum Raytracer POV-Ray</nobr>
                  <nobr>von Friedrich A. Lohm&uuml;ller</nobr>
 <hr size="3">
 <div align="center">
      <font size="5"> &nbsp; &nbsp; <b>POV-Ray Beispiele</b></font> -
      <font size="-1"><b>Die Erstellung von Objekten f&uuml;r POV-Ray</b></font></div>
 </td></h6>
 <td align="right">
        <a href="tec_010e.htm"><font size="2">English </font><img src="flag_uk.gif" border="0" width="22" height="15" alt="English" titel="English"</a></nobr>
        <a href="tec_010e.htm"><img src="flag_usa.gif" border="0" width="22" height="15" alt="English" titel="English"></a><br>
        <a href="tec_010i.htm"><font size="2">Italiano</font></a>
        <a href="tec_010i.htm"><img src="flag_ita.gif" alt="Italiano" title="Italiano"align="bottom" width="22" height="15" border="0"></a><br>
        <a href="tec_010f.htm"><font size="2">Fran&ccedil;ais</font></a>
        <a href="tec_010f.htm"><img src="flag_fra.gif" alt="fran&ccedil;ais" title="fran&ccedil;ais"align="bottom" width="22" height="15" border="0"></a><br>

    </td>
</tr></table><a name="start"></a><hr size="3">
<table border="0" width="100%" cellspacing="5">  <!--- global table -->
<tr><td valign="top"> <!-- Index -->
<font size="2">
 <a href="../../index_d.htm">Home</b></a><br>
 - <a href="../pov__ger.htm"><nobr>POV-Ray Tutorial</nobr></b></a><br>
<br>
 &nbsp;&nbsp;- <a href="sam_000d.htm">POV-Ray Beispiele</b></a><br>
 &nbsp; &nbsp; Inhalts&uuml;bersicht<br>
&nbsp; -  <a href="sam_300d.htm">Geometrie</b></a><br>
&nbsp; -  <a href="sam_100d.htm">Architektur</b></a><br>
&nbsp; -  <a href="tec_000d.htm">Technik</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_750d.htm">Leiter</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_700d.htm">Masten</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_710d.htm">Gel&auml;nder</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_720d.htm">Br&uuml;cke</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_730d.htm">R&ouml;hren</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_731d.htm">Rohrabzweigung</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_732d.htm">Rohr-Absperrhahn</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_400d.htm">Kette</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_450d.htm">Drahtspule</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_500d.htm">Torpedo</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_600d.htm">Cruise Missile</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_900d.htm">Rakete</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_190d.htm">Rad</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_100d.htm">Truck</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_850d.htm">Propeller</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_800d.htm">Flugzeug</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_550d.htm">Kanu</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_050d.htm">Gitarrenbody</b></a><br>
 &nbsp; &nbsp; -  <!--a href="tec_010d.htm"--><b>7-Segment Display</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_020d.htm">Flachbandkabel</b></a><br>
 &nbsp; &nbsp; -  <a href="tec_030d.htm">Kabelbaum</b></a><br>
<!--&nbsp; &nbsp; -  <a href="sam_000d.htm">Schiffe</b></a><br>
    &nbsp; &nbsp; -  <a href="sam_000d.htm">Eisenbahn</b></a><br>-->

 <nobr> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
       &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </nobr>
</font>


</td><td valign="top" rowspan="2" align="left"> <!-- Content - 2nd column -->
<a name="Top"></a>
<table cellpadding="5" width="100%" align="center">
<tr>
 <td align="center" valign="top">&nbsp;<br>
   <table align="center" border="4"  bgcolor="#efefef"
            bordercolor="#c0c0c0" bordercolordark="#ffffff"  bordercolorlight="#808080">
            <tr><td><a href="javascript:ShowImage('electronic/Seven_Segment_LCD_1_im.htm')"
                 onmouseover="window.status='ShowSingleImage';return true"
                 onmouseout="window.status=''">
              <img src="electronic/Seven_Segment_LCD_01t.jpg" width="160" height="120" border="0"
                   alt="7-Segment_LCD" title="7-Segment_LCD"></a></td>
    </tr></table><br>

  </td>
 <td align="left" valign="top">
  <p align="justify"><br>
  <font size="6"><b>7-Segment Display</b></font>  (LCD)<br>
 <h6>Objekte:  box, polygon.<br>
     Methoden: #declare, #local, union, #macro, #while, #if #else, #switch, array.</h6>
 <h6 align="justify">
 </td></h6>
</tr>
<tr><td colspan="2"><hr></td></tr>
</table>


<table cellpadding="3" width="80%" align="center">
<tr>
 <td valign="top">
<p align="justify"><font size="+1"><b>Erstellung eines 7-Segment Displayes (LCD - liquid crystal display) :</b></font></b><br>
&nbsp; <h4>
<b>Schritt 1: Ein einzelnes 7-Segment-Element:</b></h4>
<p align="justify">Zun&auml;chst bauen wir unter Verwendung eines Polygons ein einzelnes LCD-Element, wof&uuml;r
      wir eine geschlossene Kette von Randpunkten ben&ouml;tigen:</p>
// polygon { Anzahl der Punkte,<br>
// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Liste der &lt;x,y&gt;-Punkte<br>
// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; in geschlossener Serie! }
<pre><b>#local SS_Width = 1.2;
#local SS_Length = 6.0;
#local SS_Diag = sqrt(SS_Width*SS_Width)/2;

#declare Seven_Segment_Element = //---------
polygon {  7,
  &lt;-SS_Length/2, 0&gt;,
  &lt;-SS_Length/2+SS_Diag, -SS_Width/2&gt;,
  &lt; SS_Length/2-SS_Diag, -SS_Width/2&gt;,
  &lt; SS_Length/2, 0&gt;,
  &lt; SS_Length/2-SS_Diag,  SS_Width/2&gt;,
  &lt;-SS_Length/2+SS_Diag,  SS_Width/2&gt;,
  &lt;-SS_Length/2, 0&gt;
  texture{
    pigment{ color rgb&lt; 1, 0, 0&gt; }
    finish { ambient 0.9 diffuse 0.1 phong 1}
         } // end of texture
  rotate&lt;90,0,0&gt;//turn it on the floor !!
} // end of polygon --------------------------
</b></pre>

</td>
<td colspan="1">
  <table align="center" border="5" bgcolor="#EFEFEF"
         bordercolor="#c0c0c0" bordercolordark="#808080"  bordercolorlight="#ffffff">
  <tr><td><img src="electronic/Seven_Segment_Element_1.jpg" width="320" height="240"
           alt="Seven_Segment_Element" title="Seven_Segment_Element"></td></tr>
  </table>
</td>
</tr>

<tr>
  <td colspan="2"  align="center"><hr></td>
</tr>

<tr>
 <td colspan="1"><h4><b>Schritt 2:</b> <b> Das 7-Segment-Element als ein Makro</b></h4>
<p align="justify">Um die Farben des Elements von activ zu inactiv &auml;ndern zu k&ouml;nnen m&uuml;ssen wir
   die Definition in eine Makro-Definition verwandeln:</p>
<pre><b>#macro SS7_Element( SS_Color__ )
#local SS_Width = 1.2;
#local SS_Length = 6.0;
#local SS_Diag = sqrt(SS_Width*SS_Width)/2;

polygon {  7,
  &lt;-SS_Length/2, 0&gt;,
  &lt;-SS_Length/2+SS_Diag, -SS_Width/2&gt;,
  &lt; SS_Length/2-SS_Diag, -SS_Width/2&gt;,
  &lt; SS_Length/2, 0&gt;,
  &lt; SS_Length/2-SS_Diag,  SS_Width/2&gt;,
  &lt;-SS_Length/2+SS_Diag,  SS_Width/2&gt;,
  &lt;-SS_Length/2, 0&gt;
  texture{SS_Color__}
  rotate&lt;90,0,0&gt;//turn it on the floor !!
} // end of polygon --------------------------
</b></pre>
  <p>Wir k&ouml;nnen dieses Macro mit jedere gew&uuml;nschten Farbe aufrufen:</p>
<pre><b>#declare Active =   // red
  texture{
     pigment{ color rgb&lt 1, 0, 0&gt;}
     finish { ambient 0.9 diffuse 0.1}
  } // end of texture
#declare Inactive =   //gray
  texture{
     pigment{ color rgb&lt1,1,1&gt;*0.2}
  } // end of texture

object{
  S7_Element( Active )
  translate&lt;0,0.001, 0.7&gt;}
object{
  S7_Element(Inactive)
  translate&lt;0,0.001,-0.7&gt;}</b></pre>



</td>
<td colspan="1">
 <h5 align="center">
 <table align="center" border="5" bgcolor="#EFEFEF"
        bordercolor="#c0c0c0" bordercolordark="#808080"  bordercolorlight="#ffffff">
  <tr><td><img src="electronic/Seven_Segment_Element_2.jpg" width="320" height="240"
           alt="Seven_Segment_Element" title="Seven_Segment_Element"></td>
           </tr>
 </table> 7-Segment LCD Elemente</h5>
</td>
</tr>
<tr>
  <td colspan="2"  align="center"><hr></td>
</tr>
</table>
<table cellpadding="3" width="80%" align="center">
<tr>

<tr>
 <td colspan="1" valign="top" align="left">
  <h4 align="justify"><b>Schritt 3: 7-Segment-LED als Makro:</b></h4>
Das folgende Makro verwendet das vorhergehende Makro <nobr>&quot;SS7_Element(...)&quot;!</nobr>
<pre><b>//--------------------------------------------
#macro Seven_Segment( SS_Number,
                      SS_Angle,
                      SS_Background_Scale,
                      SS_Light_Color,
                      SS_Shade_Color,
                      SS_Background_Color,
                    ) //----------------------
//--------------------------------------------
#local SS_Len = 6.2;
#local D = 0.0001;  // just a little bit !!
#local Shear_Factor =  tan(radians(SS_Angle));
//---------------------------------------------
// The sequence of the elements:
//      -       1
//    /  /   6    2
//     -        7
//  /  /     5    3
//   -          4
//---------------------------------------------
#switch (SS_Number)
#case(0)
 #local Lights_On = array [7] {1,1,1,1,1,1,0}
#break
#case(1)
 #local Lights_On = array [7] {0,1,1,0,0,0,0}
#break
#case(2)
 #local Lights_On = array [7] {1,1,0,1,1,0,1}
#break
#case(3)
 #local Lights_On = array [7] {1,1,1,1,0,0,1}
#break
#case(4)
 #local Lights_On = array [7] {0,1,1,0,0,1,1}
#break
#case(5)
 #local Lights_On = array [7] {1,0,1,1,0,1,1}
#break
#case(6)
 #local Lights_On = array [7] {1,0,1,1,1,1,1}
#break
#case(7)
 #local Lights_On = array [7] {1,1,1,0,0,0,0}
#break
#case(8)
 #local Lights_On = array [7] {1,1,1,1,1,1,1}
#break
#case(9)
 #local Lights_On = array [7] {1,1,1,1,0,1,1}
#break
#else // nothing - all off!!!
 #local Lights_On = array [7] {0,0,0,0,0,0,0}
#break
#end //  end of switch for arrays
//---------------------------------------
#macro Light_Color(Num)
#if(Lights_On[Num] = 1)  SS_Light_Color
#else                    SS_Shade_Color
#end
#end //--------------------- end of macro
union{

 union{
 object{ S7_Element( Light_Color(1-1)) <br>
         translate&lt;0,0, SS_Len> }
 object{ S7_Element( Light_Color(7-1))
         translate&lt;0,0, 0> }
 object{ S7_Element( Light_Color(4-1))
         translate&lt;0,0,-SS_Len> }

 object{ S7_Element( Light_Color(2-1))
         rotate&lt;0,90,0>
         translate&lt; SS_Len/2,0, SS_Len/2&gt;}
 object{ S7_Element( Light_Color(3-1))
         rotate&lt;0,90,0>
         translate&lt; SS_Len/2,0,-SS_Len/2&gt;}
 object{ S7_Element( Light_Color(6-1))
         rotate&lt;0,90,0>
         translate&lt;-SS_Len/2,0, SS_Len/2&gt;}
 object{ S7_Element( Light_Color(5-1))
         rotate&lt;0,90,0>
         translate&lt;-SS_Len/2,0,-SS_Len/2&gt;}
 //*)
 } // end LEDs
box{ &lt;-SS_Len/2,-0.01     ,-SS_Len&gt;,
     &lt; SS_Len/2,-0.0000001, SS_Len&gt;
     scale SS_Background_Scale
     texture {SS_Background_Color}}
translate&lt;0,D,0&gt;
} // end of union
#end //---------------------- end of macro
//----------------------------------------

#declare Active_Texture =  // red
  texture{
    pigment{ color rgb&lt; 1,0,0&gt;*1.2}
    finish { ambient .9 diffuse .1 phong 1}
  } // end of texture
#declare Inactive_Texture =  // gray
  texture{
    pigment{ color rgb&lt;1,1,1&gt;*0.3}
    finish { phong 1 reflection 0.00}
  } // end of texture
#declare Background_Texture =  // ~black
  texture{
    pigment{ color rgb&lt;1,1,1&gt;*0.05}
    finish { phong 1 reflection 0.10}
  } // end of texture

//----------------------------------------
//----------------------------------------
object{
  Seven_Segment(
    9, // 0~9, integer !!! SS_Number,
    0, // 0~10, SS_Angle for shearing,
    &lt; 1.5, 10, 1.40&gt;, // SS_Background_Scale,
    // &lt; 1.70, 10, 1.40&gt;, //for SS_Angle=10
    Active_Texture, // SS_Light_Color,
    Inactive_Texture, //SS_Shade_Color,
    Background_Texture, //SS_Background_Color,
  ) //------------------------------------
    scale 0.1
    rotate&lt; 0,0,0&gt;
    translate&lt;0,0.05,0&gt; }
//----------------------------------------

</b></pre> </td>
 <td colspan="1" valign="top">
 <h5 align="center">
 <table align="center" border="5" bgcolor="#EFEFEF"
        bordercolor="#c0c0c0" bordercolordark="#808080"  bordercolorlight="#ffffff">
 <tr><td><img src="electronic/Seven_Segment_1_9.jpg" width="240" height="320"
          alt="Seven_Segment_LCD" title="Seven_Segment_LCD"></td></tr>
 </table> 7-Segment LCD</h5>
<h4><b>Zusatz-Schritt:<br>
 &nbsp; &nbsp; &nbsp; Geschertes 7-Segment-LCD.</b></h4>
<p align="justify">
Wenn wir bei der Marke &quot;//*)&quot; zu unserem Makro eine <br>
Scherungs-Matrix hinzuf&uuml;gen:
<pre><b> matrix&lt; 1,  0,  0, // matrix-shear_z_to_x
         0,  1,  0,
     Shear_Factor, 0,  1,
         0,  0,  0 &gt;
</b></pre>
dann m&uuml;ssen wir das Hintergrund-Panel durch
entsprechendes Skalieren anpassen: <br>
<pre><b>&lt; 1.70, 10, 1.40&gt;</b></pre>
 <h5 align="center">
 <table align="center" border="5" bgcolor="#EFEFEF"
        bordercolor="#c0c0c0" bordercolordark="#808080"  bordercolorlight="#ffffff">
 <tr><td><img src="electronic/Seven_Segment_2_9.jpg" width="240" height="320"
          alt="Seven_Segment_LCD" title="Seven_Segment_LCD"></td></tr>
 </table>Eine gescherte 7-Segment LCD Anzeige.</h5>
 Sicher k&ouml;nnen sie nun das gegenw&auml;rtige LCD dahingehend erweitern, dass es in der Lage ist
 auch einige wichtige nicht- numerische Zeichen darzustellen:
 <h5 align="center">
 <table align="center" border="5" bgcolor="#EFEFEF"
        bordercolor="#c0c0c0" bordercolordark="#808080"  bordercolorlight="#ffffff">
 <tr><td><img src="electronic/Seven_Segment_Lo.jpg" width="256" height="256"
          alt="Seven_Segment_LCD" title="Seven_Segment_LCD"></td></tr>
 </table>Ein Lo-7-Segment LCD. :-)</h5>

<br>
<br>
<br>
 <h5 align="center">Szenenbeschreibung f&uuml;r<br> ein einfaches 7-Segment LCD<br> in POV-Ray: <br>
 <a href="electronic/Seven_Segment_9.txt">&quot;Seven_Segment_9.txt&quot;</a> or <br>
 <a href="electronic/Seven_Segment_9.pov">&quot;Seven_Segment_9.pov&quot;</a></h5>
</p>
<br>
<br>
Und jetzt ist es an Ihnen ein Display mit mehreren Stellen und perfekter als dieses zu entwickeln:
 <h5 align="center">
 <table align="center" border="5" bgcolor="#EFEFEF"
        bordercolor="#c0c0c0" bordercolordark="#808080"  bordercolorlight="#ffffff">
 <tr><td><img src="electronic/Seven_Segment_LCD_1.jpg" width="240" height="180"
          alt="Seven_Segment_LED" title="Seven_Segment_LED"></td></tr>
 </table>Ein 7-Segment LCD<br>
  mit 4 Stellen und Dezimalpunkt.</h5>

</td>
</tr>
<tr>
<td>
 <h5><b>Gebrauchsferige POV-Ray Objekte</b> als<br>
    Include-Dateien mit Beispieldateien findet man<br>
   auf der <a href="../objects/obj_000d.htm">POV-Ray-Objects-Seite</b></a>.
</td></h5>
</tr>
</table>

</td></tr>
</table>


</td>
<tr>
<td valign="middle" align="center"><a href="#top">top</a>
</td></tr></table>

</div>

<!--Footer  -->
<hr size="3">
<i><font size="-1">&copy; Friedrich A. Lohm&uuml;ller, 2009<br>
   <a href="http://www.f-lohmueller.de" target="_blank"><nobr>http://www.f-lohmueller.de</nobr></i></a>
 <!-- COUNTERSTART -->
 <script language="JavaScript" type="text/javascript" src="../../pphlogger.js"></script>
 <noscript><img alt="" src="http://www.counterbox.de/counter/pphlogger.php?id=flohmuller&st=img"></noscript>
 <!-- COUNTERENDE -->
 </font>
</body>
</html>
